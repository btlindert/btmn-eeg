function myPipe = sub_block_split_pipeline(varargin)
% SUB_BLOCK_SPLIT_PIPELINE - Split raw data files into single sub-block files
%
% See also: btmn.pipes

import meegpipe.*;
import physioset.*;
%import btmn.split_files.*;

nodeList = {};

%% NODE: import from .mff file

myImporter = physioset.import.mff('Precision', 'single');
myNode = meegpipe.node.physioset_import.new('Importer', myImporter);

nodeList = [nodeList {myNode}];

%% NODE: Extract baseline sub-block

splitNaming = @(physObj, ev, evIdx) ...
    btmn.split_files.block_naming_policy(physObj, ev, evIdx, 'baseline');

thisNode = meegpipe.node.split.new(...
    'EventSelector',        physioset.event.class_selector('Type', 'nbk+'), ... 
    'Offset',               -930, ...
    'Duration',             930, ...
    'SplitNamingPolicy',    splitNaming, ...
    'Name',                 'baseline');

nodeList = [nodeList {thisNode}];

%% NODE: Extract nback sub-block

splitNaming = @(physObj, ev, evIdx) ...
    btmn.split_files.block_naming_policy(physObj, ev, evIdx, 'nback');

thisNode = meegpipe.node.split.new(...
    'EventSelector',        physioset.event.class_selector('Type', 'pvt+'), ... 
    'Offset',               -180, ...
    'Duration',             180, ... 
    'SplitNamingPolicy',    splitNaming, ...
    'Name',                 'nback');

nodeList = [nodeList {thisNode}];

%% NODE: Extract pvt sub-block

splitNaming = @(physObj, ev, evIdx) ...
    btmn.split_files.block_naming_policy(physObj, ev, evIdx, 'pvt');

thisNode = meegpipe.node.split.new(...
    'EventSelector',        physioset.event.class_selector('Type', 'sac+'), ... 
    'Offset',               -180, ...
    'Duration',             180, ...
    'SplitNamingPolicy',    splitNaming, ...
    'Name',                 'pvt');

nodeList = [nodeList {thisNode}];

%% NODE: Extract saccade sub-block 

splitNaming = @(physObj, ev, evIdx) ...
    btmn.split_files.block_naming_policy(physObj, ev, evIdx, 'saccade');

thisNode = meegpipe.node.split.new(...
    'EventSelector',        physioset.event.class_selector('Type', 'sac+'), ... 
    'Offset',               0, ...
    'Duration',             120, ... 
    'SplitNamingPolicy',    splitNaming, ...
    'Name',                 'saccade');

nodeList = [nodeList {thisNode}];

%% NODE: Extract subj sub-block

splitNaming = @(physObj, ev, evIdx) ...
    btmn.split_files.block_naming_policy(physObj, ev, evIdx, 'subjective');

thisNode = meegpipe.node.split.new(...
    'EventSelector',        physioset.event.class_selector('Type', 'eo\+\+'), ... 
    'Offset',               -120, ...
    'Duration',             120, ... 
    'SplitNamingPolicy',    splitNaming, ...
    'Name',                 'subjective');

nodeList = [nodeList {thisNode}];

%% NODE: Extract rs-eo sub-block

splitNaming = @(physObj, ev, evIdx) ...
    btmn.split_files.block_naming_policy(physObj, ev, evIdx, 'rs-eo');

thisNode = meegpipe.node.split.new(...
    'EventSelector',        physioset.event.class_selector('Type', 'eoeo'), ... 
    'Offset',               0, ...
    'Duration',             180, ... 
    'SplitNamingPolicy',    splitNaming, ...
    'Name',                 'rs-eo');

nodeList = [nodeList {thisNode}];

%% NODE: Extract rs-ec sub-block

splitNaming = @(physObj, ev, evIdx) ...
    btmn.split_files.block_naming_policy(physObj, ev, evIdx, 'rs-ec');

thisNode = meegpipe.node.split.new(...
    'EventSelector',        physioset.event.class_selector('Type', 'ecec'), ... 
    'Offset',               0, ...
    'Duration',             180, ... 
    'SplitNamingPolicy',    splitNaming, ...
    'Name',                 'rs-ec');

nodeList = [nodeList {thisNode}];


%% The actual pipeline

myPipe = meegpipe.node.pipeline.new(...
    'NodeList',         nodeList, ...
    'Save',             true, ...
    'Name',             'sub_blocks', ...
    'TempDir',          @() tempdir, ...
    varargin{:});

end